// <auto-generated />
using System;
using Facturacion.Models.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Facturacion.Migrations
{
    [DbContext(typeof(FacturacionDbContext))]
    [Migration("20250726111513_Clientes y Peoductos de Prueba")]
    partial class ClientesyPeoductosdePrueba
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Facturacion.Models.Entities.Categoria", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Categorias");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Descripcion = "Servicios profesionales",
                            Nombre = "Servicios"
                        },
                        new
                        {
                            Id = 2,
                            Descripcion = "Productos físicos",
                            Nombre = "Productos"
                        },
                        new
                        {
                            Id = 3,
                            Descripcion = "Servicios de consultoría",
                            Nombre = "Consultoría"
                        });
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("CIF")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("NIF")
                        .HasMaxLength(9)
                        .HasColumnType("nvarchar(9)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Telefono")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CIF")
                        .IsUnique()
                        .HasFilter("[CIF] IS NOT NULL");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NIF")
                        .IsUnique()
                        .HasFilter("[NIF] IS NOT NULL");

                    b.ToTable("Clientes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Apellido = "García López",
                            Direccion = "Calle Mayor, 123, 28001 Madrid",
                            Email = "maria.garcia@email.com",
                            NIF = "12345678A",
                            Nombre = "María",
                            Telefono = "+34 600 123 456"
                        },
                        new
                        {
                            Id = 2,
                            Apellido = "Tecnológica S.L.",
                            CIF = "B12345678",
                            Direccion = "Avenida de la Innovación, 45, 08001 Barcelona",
                            Email = "contacto@innovaciontech.es",
                            Nombre = "Innovación",
                            Telefono = "+34 930 123 456"
                        },
                        new
                        {
                            Id = 3,
                            Apellido = "Martínez Ruiz",
                            Direccion = "Plaza del Sol, 8, 41001 Sevilla",
                            Email = "carlos.martinez@hotmail.com",
                            NIF = "23456789B",
                            Nombre = "Carlos",
                            Telefono = "+34 650 234 567"
                        },
                        new
                        {
                            Id = 4,
                            Apellido = "Rodríguez Fernández",
                            Direccion = "Calle de la Paz, 67, 46001 Valencia",
                            Email = "ana.rodriguez@gmail.com",
                            NIF = "34567890C",
                            Nombre = "Ana",
                            Telefono = "+34 670 345 678"
                        },
                        new
                        {
                            Id = 5,
                            Apellido = "del Norte S.A.",
                            CIF = "A23456789",
                            Direccion = "Polígono Industrial Norte, Nave 12, 48001 Bilbao",
                            Email = "info@construccionesnorte.com",
                            Nombre = "Construcciones",
                            Telefono = "+34 940 456 789"
                        },
                        new
                        {
                            Id = 6,
                            Apellido = "López González",
                            Direccion = "Ronda de la Universidad, 34, 37001 Salamanca",
                            Email = "david.lopez@outlook.com",
                            NIF = "45678901D",
                            Nombre = "David",
                            Telefono = "+34 680 567 890"
                        },
                        new
                        {
                            Id = 7,
                            Apellido = "Sánchez Moreno",
                            Direccion = "Calle del Carmen, 19, 18001 Granada",
                            Email = "elena.sanchez@yahoo.es",
                            NIF = "56789012E",
                            Nombre = "Elena",
                            Telefono = "+34 690 678 901"
                        },
                        new
                        {
                            Id = 8,
                            Apellido = "Mediterráneo S.L.",
                            CIF = "B34567890",
                            Direccion = "Paseo Marítimo, 156, 03001 Alicante",
                            Email = "ventas@comercialmediterraneo.es",
                            Nombre = "Comercial",
                            Telefono = "+34 960 789 012"
                        },
                        new
                        {
                            Id = 9,
                            Apellido = "Hernández Jiménez",
                            Direccion = "Gran Vía, 89, 50001 Zaragoza",
                            Email = "javier.hernandez@telefonica.net",
                            NIF = "67890123F",
                            Nombre = "Javier",
                            Telefono = "+34 600 890 123"
                        },
                        new
                        {
                            Id = 10,
                            Apellido = "Díaz Romero",
                            Direccion = "Calle Real, 45, 15001 A Coruña",
                            Email = "laura.diaz@icloud.com",
                            NIF = "78901234G",
                            Nombre = "Laura",
                            Telefono = "+34 610 901 234"
                        });
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Factura", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ClienteId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2");

                    b.Property<string>("FormaPago")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("IRPF")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("IVA")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("NumeroFactura")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Observaciones")
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Total")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("NumeroFactura")
                        .IsUnique();

                    b.ToTable("Facturas");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.FacturaDetalle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("Cantidad")
                        .HasColumnType("int");

                    b.Property<int>("FacturaId")
                        .HasColumnType("int");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("ProductoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("FacturaId");

                    b.HasIndex("ProductoId");

                    b.ToTable("FacturaDetalles");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Producto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoriaId")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<decimal>("PrecioUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("CategoriaId");

                    b.ToTable("Productos");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoriaId = 3,
                            Descripcion = "Análisis completo de estrategia digital y plan de mejora personalizado",
                            Nombre = "Consultoría de Marketing Digital",
                            PrecioUnitario = 850.00m
                        },
                        new
                        {
                            Id = 2,
                            CategoriaId = 1,
                            Descripcion = "Creación de sitio web responsive con diseño personalizado y CMS",
                            Nombre = "Desarrollo Web Personalizado",
                            PrecioUnitario = 1200.00m
                        },
                        new
                        {
                            Id = 3,
                            CategoriaId = 2,
                            Descripcion = "Licencia de software de gestión empresarial por 12 meses",
                            Nombre = "Licencia Software Anual",
                            PrecioUnitario = 299.99m
                        },
                        new
                        {
                            Id = 4,
                            CategoriaId = 1,
                            Descripcion = "Servicio de mantenimiento y soporte técnico especializado",
                            Nombre = "Mantenimiento Técnico Mensual",
                            PrecioUnitario = 150.00m
                        },
                        new
                        {
                            Id = 5,
                            CategoriaId = 1,
                            Descripcion = "Curso de formación presencial de 16 horas en nuevas tecnologías",
                            Nombre = "Formación Especializada",
                            PrecioUnitario = 450.00m
                        });
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Factura", b =>
                {
                    b.HasOne("Facturacion.Models.Entities.Cliente", "Cliente")
                        .WithMany("Facturas")
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Cliente");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.FacturaDetalle", b =>
                {
                    b.HasOne("Facturacion.Models.Entities.Factura", "Factura")
                        .WithMany("FacturaDetalles")
                        .HasForeignKey("FacturaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Facturacion.Models.Entities.Producto", "Producto")
                        .WithMany("FacturaDetalles")
                        .HasForeignKey("ProductoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Factura");

                    b.Navigation("Producto");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Producto", b =>
                {
                    b.HasOne("Facturacion.Models.Entities.Categoria", "Categoria")
                        .WithMany("Productos")
                        .HasForeignKey("CategoriaId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Categoria");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Categoria", b =>
                {
                    b.Navigation("Productos");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Cliente", b =>
                {
                    b.Navigation("Facturas");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Factura", b =>
                {
                    b.Navigation("FacturaDetalles");
                });

            modelBuilder.Entity("Facturacion.Models.Entities.Producto", b =>
                {
                    b.Navigation("FacturaDetalles");
                });
#pragma warning restore 612, 618
        }
    }
}
